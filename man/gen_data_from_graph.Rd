% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_data_from_graph.R
\name{gen_data_from_graph}
\alias{gen_data_from_graph}
\title{gen_data_from_graph}
\usage{
gen_data_from_graph(beta, alpha = rnorm(nrow(beta)), sigma = rep(1,
  nrow(beta)), ndata = 100, loop = 1:nrow(beta), cor_loop = 0.5,
  scale_x = 1)
}
\arguments{
\item{beta}{square numeric matrix defining linear coefficients between nodes}

\item{alpha}{vector of numeric values: baseline values for each nodes}

\item{sigma}{positive numeric vector of same length as \code{alpha}: SD of normal noise for each node}

\item{ndata}{number of samples to generate}

\item{loop}{integer vector of strongly connected components, to allow for use of loops;
for DAGs (default) \code{loop = 1:nrow(beta)}; for e.g. a 6-node graph with a 2-node
SCC on nodes 3 and 4, \code{loop = c(1, 2, 3, 3, 4, 5)}}

\item{cor_loop}{correlations of nodes within loops (loops are treated as multivariate Gaussian)}

\item{scale_x}{numeric; scale all linear relationship by \code{scale_x} (including in loops)}
}
\description{
Generate random data draws from a given Bayesian network,
assuming with linear relationships and Gaussian noise.
Loops are treated as multivariate Gaussian with fixed correlation.
}
\details{
This is a convenience function to generate BNs which can be used
for benchmarks, visualisations etc.
Apart from DAGs, cyclic graphs are also allowed. In all cases \emph{the input vertices
must be topologically sorted} and loop members should be consequent vertices.
}
\examples{
true_adj <- matrix(c(
0, 1, 0, 0,
0, 0, 1, 0,
0, 0, 0, 1,
0, 0, 0, 0
), 4, 4, byrow = T)*runif(4*4, 1, 3)*sign(rnorm(4*4))
out <- gen_data_from_graph(true_adj, rep(0, 4), rep(1,4), 100)
pairs(out)

# Something a bit bigger:
beta <- matrix(rbinom(10*10, 1, .2), 10, 10)
beta[lower.tri(beta)] <- 0 #'sorted' matrix
diag(beta) <- 0
pairs(gen_data_from_graph(beta))

}
\author{
Witold Wiecek
}
